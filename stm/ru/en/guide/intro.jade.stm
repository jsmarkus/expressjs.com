@section
@  h3(id='intro') Getting started
#  h3(id='intro') Начало работы
@
@  p.
@    With node installed (<a href="http://nodejs.org/download">download</a>),
#    Предполагается, что node уже установлен (<a href="http://nodejs.org/download">скачать</a>).
@    get your first application started by creating a directory somewhere
#    Давайте создадим первое приложение, для этого создайте директорию где-нибудь
@    on your machine:
#    на своей машине:
@
@  +js.
@    $ mkdir hello-world
@
@  p.
@    In this same directory you'll be defining the application "package", which
#    В этой папке вы создадите своё приложение в виде "пакета", это
@    are no different than any other node package. You'll need a package.json
#    обыкновенный node-овский пакет. Вам понадобится создать файл package.json
@    file in the directory, with express defined as a dependency. You may use
#    в своей папке, а express прописать как зависимость. Чтобы узнать последнюю версию,
@    <code>npm info express version</code> to fetch the latest version, it's
#    можно воспользоваться командой <code>npm info express version</code>,
@    preferred that you do this instead of "3.x" below to prevent any future
#    лучше уазать точную версию, а не "3.x", чтобы потом избежать возможных
@    surprises.
#    граблей.
@
@  +js.
@    {
@      "name": "hello-world",
@      "description": "hello world test app",
@      "version": "0.0.1",
@      "private": true,
@      "dependencies": {
@        "express": "3.x"
@      }
@    }
@
@  p.
@    Now that you have a package.json file in this directory you can use
#    Теперь, когда у вас в папке есть package.json, можно воспользоваться
@    <code>npm(1)</code> to install the dependencies, in this case just
#    <code>npm(1)</code> для установки зависимостей, в частности
@    Express:
#    Express:
@
@  +js.
@    $ npm install
@
@  p.
@    Once npm finishes you'll have a localized Express 3.x dependency in
#    Как только npm отработает, в папке ./node_modules появится
@    the ./node_modules directory. You may verify this with <code>npm ls</code>
#    локально установленный пакет Express 3.x. С помощью <code>npm ls</code>
@    as shown in the following snippet displaying a tree of Express and its
#    в этом можно убедиться, вы увидите вот такое дерево
@    own dependencies.
#    зависимостей.
@
@  +js.
@    $ npm ls
@    hello-world@0.0.1 /private/tmp
@    └─┬ express@3.0.0beta7
@      ├── commander@0.6.1
@      ├─┬ connect@2.3.9
@      │ ├── bytes@0.1.0
@      │ ├── cookie@0.0.4
@      │ ├── crc@0.2.0
@      │ ├── formidable@1.0.11
@      │ └── qs@0.4.2
@      ├── cookie@0.0.3
@      ├── debug@0.7.0
@      ├── fresh@0.1.0
@      ├── methods@0.0.1
@      ├── mkdirp@0.3.3
@      ├── range-parser@0.0.4
@      ├─┬ response-send@0.0.1
@      │ └── crc@0.2.0
@      └─┬ send@0.0.3
@        └── mime@1.2.6
@
@  p.
@    Now to create the application itself! Create a file named app.js or server.js,
#    Пора создать само приложение! Создайте файл app.js или server.js,
@    whichever you prefer, require express and then create a new application with <code>express()</code>:
#    имя может быть любым, подключите express, а затем создайте экземпляр приложения с помощью <code>express()</code>:
@
@  +js.
@    var express = require('express');
@    var app = express();
@
@  p.
@    With the new application instance you can start defining routes via <code>app.VERB()</code>,
#    Теперь, когда приложение создано, можно начинать определять маршруты с помощью <code>app.МЕТОД()</code>,
@    in this case "GET /" responding with the "Hello World" string. The <code>req</code> and
#    в данном случае на запрос "GET /" попытаемся ответить строкой "Hello World". <code>req</code> и
@    <code>res</code> are the exact same objects that node provides to you, thus you may invoke
#    <code>res</code> - это те же самые объекты, которые нам предоставляет node, поэтому можно
@    <code>res.pipe()</code>, <code>req.on('data', callback)</code> and anything else you
#    пользоваться привычными <code>res.pipe()</code>, <code>req.on('data', callback)</code> и всё, что можно сделать
@    would do without Express involved.
#    без использования Express.
@
@  +js.
@    app.get('/hello.txt', function(req, res){
@      var body = 'Hello World';
@      res.setHeader('Content-Type', 'text/plain');
@      res.setHeader('Content-Length', body.length);
@      res.end(body);
@    });
@
@  p.
@    Express augments these objects providing you with higher level
#    Express дополняет эти объекты и даёт нам высокоуровневые методы,
@    methods such as <code>res.send()</code>, which among other things
#    например, <code>res.send()</code>, который, кроме прочего,
@    adds the Content-Length for you:
#    автоматически добавляет заголовок Content-Length:
@
@  +js.
@    app.get('/hello.txt', function(req, res){
@      res.send('Hello World');
@    });
@
@  p.
@    Now to bind and listen for connections invoke the <code>app.listen()</code> method,
#    Теперь, чтобы принимать соединения, вызовите метод <code>app.listen()</code>,
@    accepting the same arguments as node's <a href="http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_listeninglistener">net.Server#listen()</a>:
#    который принимает такие же аргументы, что и node-овский <a href="http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_listeninglistener">net.Server#listen()</a>:
@
@  +js.
@    app.listen(3000);
@    console.log('Listening on port 3000');
@