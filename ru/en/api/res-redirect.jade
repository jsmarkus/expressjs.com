section
  h3(id='res.redirect') res.redirect([status], url)
  p.
    Перенаправляет на заданный <code>url</code> со статусом 302, либо заданным через
    <code>status</code>.

  +js.
    res.redirect('/foo/bar');
    res.redirect('http://example.com');
    res.redirect(301, 'http://example.com');
    res.redirect('../login');

  p.
    Express поддерживает несколько форм перенаправления,
    первая - это полный URI для перенаправления на другой сайт:

  +js.
    res.redirect('http://google.com');

  p.
    Вторая форма - это относительное перенаправление, например,
    если вы были на <code>http://example.com/admin/post/new</code>,
    следующее перенаправление на <code>/admin</code> перенаправит вас на <code>http://example.com/admin</code>:

  +js.
    res.redirect('/admin');

  p.
    Следующее перенаправление относительно точки монтирования приложения - <code>mount</code>. Например,
    если у вас есть блог-приложение, смонтированное на <code>/blog</code>, в идеале оно не должно знать
    куда оно смонтировано. Перенаправление на <code>/admin/post/new</code> привело бы вас на
    <code>http://example.com/admin/post/new</code>, но в следующем примере перенаправление из смонтированного приложения
    приведёт вас на <code>http://example.com/blog/admin/post/new</code>:

  +js.
    res.redirect('admin/post/new');

  p.
    Также бывают перенаправления, относительные к пути. Если вы были
    на <code>http://example.com/admin/post/new</code>, следующее перенаправление
    приведёт вас на <code>http//example.com/admin/post</code>:

  +js.
    res.redirect('..');

  p.
    Последний особый случай - это перенаправление <code>back</code>, приводящее назад
    к пути, взятому из заголовка Referer (или Referrer). В случае отсутствия заголовка по умолчанию это <code>/</code>.

  +js.
    res.redirect('back');
  
    
