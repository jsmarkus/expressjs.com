section
  h3(id='app.param') app.param([name], callback)
  
  p.
    Привязать логику к параметру маршрута. Например, если у нас в маршруте
    есть параметр <code>:user</code>, можно привязать логику, которая будет автоматически загружать
    пользователя в <code>req.user</code>, либо выполнять валидацию
    переданного параметра.

  p.
    Следующий пример демонстрирует, что <code>callback</code>
    во многом является такой же прослойкой, что даёт возможность работать асинхронно, однако
    добавляется ещё один параметр, здесь мы назвали его <code>id</code>.
    Далее выполняется попытка загрузить пользователя и присвоить его <code>req.user</code>,
    иначе в <code>next(err)</code> передаётся ошибка.

  +js.
    app.param('user', function(req, res, next, id){
      User.find(id, function(err, user){
        if (err) {
          next(err);
        } else if (user) {
          req.user = user;
          next();
        } else {
          next(new Error('не удалось загрузить пользователя'));
        }
      });
    });

  p.
    Также, можно передать один лишь <code>callback</code>, в которром
    мы можем переопределить API <code>app.param()</code>.
    В примере <a href="http://github.com/visionmedia/express-params">express-params</a>
    показано как таким образом ограничить параметры
    заданным регулярным выражением.

  p.
    Вот пример посложнее, здесь мы проверяем, является ли второй аргумент регулярным выражением
    и возвращаем callback, который действует, как пример с параметром "user". (TODO: при вычитке уточнить!)

  +js.
    app.param(function(name, fn){
      if (fn instanceof RegExp) {
        return function(req, res, next, val){
          var captures;
          if (captures = fn.exec(String(val))) {
            req.params[name] = captures;
            next();
          } else {
            next('route');
          }
        }
      }
    });

  p.
    Метод может использоваться для эффективной валидации параметров, или также
    для разбора их с поддержкой групп в регулярном выражении:

  +js.
    app.param('id', /^\d+$/);

    app.get('/user/:id', function(req, res){
      res.send('user ' + req.params.id);
    });

    app.param('range', /^(\w+)\.\.(\w+)?$/);

    app.get('/range/:range', function(req, res){
      var range = req.params.range;
      res.send('from ' + range[1] + ' to ' + range[2]);
    });