section
  h3(id='app.use') app.use([path], function)
  
  p.
    Использовать данную прослойку <code>function</code>, опционально смонтировав её под URL-префиксом <code>path</code>
    (по умолчанию "/").

  +js.
    var express = require('express');
    var app = express();

    // простой логгер
    app.use(function(req, res, next){
      console.log('%s %s', req.method, req.url);
      next();
    });

    // ответ
    app.use(function(req, res, next){
      res.send('Привет, мир!');
    });

    app.listen(3000);

  p.
    "Точка монтирования" <code>path</code> в саму прослойку
    <code>function</code> не передаётся. Предесть в том, что
    смонтированная прослойка может работать без изменений кода, не зависимо от
    "префикса" пути.

  p.
    Ниже приведён типичный пример из жизни - отдачас статики из папки ./public
    с помощью прослойки <code>express.static()</code>:

  +js.
    // GET /javascripts/jquery.js
    // GET /style.css
    // GET /favicon.ico
    app.use(express.static(__dirname + '/public'));

  p.
    Теперь допустим, что вам нужно задать для статических файлов префикс "/static". Для этого можно
    исполтьзовать монтирование прослойки. Смонтированная функция прослойки <strong>не</strong> вызывается,
    если <code>req.url</code> не начинается с префикса, и переданный в эту функцию
    URL обрезается, чтобы не содержать префикса. Таким он передаётся только в данную функцию,
    последующие же прослойки увидят <code>req.url</code> вместе с префиксом "/static",
    если конечно они не смонтированы под этим префиксом.

  +js.
    // GET /static/javascripts/jquery.js
    // GET /static/style.css
    // GET /static/favicon.ico
    app.use('/static', express.static(__dirname + '/public'));

  p.
    Порядок опреления прослоек через <code>app.use()</code> очень важен,
    поскольку они вызываются в том порядке, в каком были определены.
    Например, <code>express.logger()</code>, логгирующий запросы часто идёт самой первой
    прослойкой:

  +js.
    app.use(express.logger());
    app.use(express.static(__dirname + '/public'));
    app.use(function(req, res){
      res.send('Привет');
    });

  p.
    Теперь предположим, что мы хотим проигнорировать логгирование запросов для статических файлов,
    но всё также хотим логгировать их для остальных запросов -
    для этого можно просто переместить <code>static()</code> выше, чем <code>logger()</code>:

  +js.
    app.use(express.static(__dirname + '/public'));
    app.use(express.logger());
    app.use(function(req, res){
      res.send('Привет');
    });

  p.
    Другой пример из жизни - это когда нам надо отдавать статику из нескольких директорий,
    сохраняя более высокий приоритет за директорией "./public":

  +js.
    app.use(express.static(__dirname + '/public'));
    app.use(express.static(__dirname + '/files'));
    app.use(express.static(__dirname + '/uploads'));
