@section
@  h3(id='app.listen') app.listen()
@
@  p.
@    Bind and listen for connections on the given host and port,
#    Привязать сокет на заданные хост и порт и принимать входящие соединения,
@    this method is identical to node's <a href="http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback">http.Server#listen()</a>.
#    этот метод идентичен node-овскому <a href="http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback">http.Server#listen()</a>.
@
@  +js.
@    var express = require('express');
@    var app = express();
@    app.listen(3000);
@
@  p.
@    The <code>app</code> returned by <code>express()</code> is in fact a JavaScript
#    Объект <code>app</code>, возвращенный вызовом <code>express()</code> - это по сути
@    <code>Function</code>, designed to be passed to node's http servers as a callback
#    функция, которую удобно передавть в node-овский HTTP-сервер в качестве коллбека,
@    to handle requests. This allows you to provide both HTTP and HTTPS versions of
#    обслуживающего запросы. Это позволяет создавать HTTP и HTTPS версии
@    your app with the same codebase easily, as the app does not inherit from these,
#    приложения на одной кодовой базе, ведь app - это
@    it is simply a callback:
#    простой коллбек:
@
@  +js.
@    var express = require('express');
@    var https = require('https');
@    var http = require('http');
@    var app = express();
@    
@    http.createServer(app).listen(80);
@    https.createServer(options, app).listen(443);
@
@  p.
@    The <code>app.listen()</code> method is simply a convenience method defined as,
#    <code>app.listen()</code> - это просто удобная обёртка для HTTP,
@    if you wish to use HTTPS or provide both, use the technique above.
#    а если вам надо поднять HTTPS или оба протокола, используйте методику, приведённую выше.
@
@  +js.
@    app.listen = function(){
@      var server = http.createServer(this);
@      return server.listen.apply(server, arguments);
@    };
@