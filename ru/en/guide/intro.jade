section
  h3(id='intro') Начало работы

  p.
    Предполагается, что node уже установлен (<a href="http://nodejs.org/download">скачать</a>).
    Давайте создадим первое приложение, для этого создайте директорию где-нибудь
    на своей машине:

  +js.
    $ mkdir hello-world

  p.
    В этой папке вы создадите своё приложение в виде "пакета", это
    обыкновенный node-овский пакет. Вам понадобится создать файл package.json
    в своей папке, а express прописать как зависимость. Чтобы узнать последнюю версию,
    можно воспользоваться командой <code>npm info express version</code>,
    лучше уазать точную версию, а не "3.x", чтобы потом избежать возможных
    граблей.

  +js.
    {
      "name": "hello-world",
      "description": "hello world test app",
      "version": "0.0.1",
      "private": true,
      "dependencies": {
        "express": "3.x"
      }
    }

  p.
    Теперь, когда у вас в папке есть package.json, можно воспользоваться
    <code>npm(1)</code> для установки зависимостей, в частности
    Express:

  +js.
    $ npm install

  p.
    Как только npm отработает, в папке ./node_modules появится
    локально установленный пакет Express 3.x. С помощью <code>npm ls</code>
    в этом можно убедиться, вы увидите вот такое дерево
    зависимостей.

  +js.
    $ npm ls
    hello-world@0.0.1 /private/tmp
    └─┬ express@3.0.0beta7
      ├── commander@0.6.1
      ├─┬ connect@2.3.9
      │ ├── bytes@0.1.0
      │ ├── cookie@0.0.4
      │ ├── crc@0.2.0
      │ ├── formidable@1.0.11
      │ └── qs@0.4.2
      ├── cookie@0.0.3
      ├── debug@0.7.0
      ├── fresh@0.1.0
      ├── methods@0.0.1
      ├── mkdirp@0.3.3
      ├── range-parser@0.0.4
      ├─┬ response-send@0.0.1
      │ └── crc@0.2.0
      └─┬ send@0.0.3
        └── mime@1.2.6

  p.
    Пора создать само приложение! Создайте файл app.js или server.js,
    имя может быть любым, подключите express, а затем создайте экземпляр приложения с помощью <code>express()</code>:

  +js.
    var express = require('express');
    var app = express();

  p.
    Теперь, когда приложение создано, можно начинать определять маршруты с помощью <code>app.МЕТОД()</code>,
    в данном случае на запрос "GET /" попытаемся ответить строкой "Hello World". <code>req</code> и
    <code>res</code> - это те же самые объекты, которые нам предоставляет node, поэтому можно
    пользоваться привычными <code>res.pipe()</code>, <code>req.on('data', callback)</code> и всё, что можно сделать
    без использования Express.

  +js.
    app.get('/hello.txt', function(req, res){
      var body = 'Hello World';
      res.setHeader('Content-Type', 'text/plain');
      res.setHeader('Content-Length', body.length);
      res.end(body);
    });

  p.
    Express дополняет эти объекты и даёт нам высокоуровневые методы,
    например, <code>res.send()</code>, который, кроме прочего,
    автоматически добавляет заголовок Content-Length:

  +js.
    app.get('/hello.txt', function(req, res){
      res.send('Hello World');
    });

  p.
    Теперь, чтобы принимать соединения, вызовите метод <code>app.listen()</code>,
    который принимает такие же аргументы, что и node-овский <a href="http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_listeninglistener">net.Server#listen()</a>:

  +js.
    app.listen(3000);
    console.log('Listening on port 3000');
