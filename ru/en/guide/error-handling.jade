section
  h3(id='error-handling') Обработка ошибок

  p.
    Прослойки для обработки ошибок определяются, как и любые другие прослойки,
    но с четырьмя аргументами, в таком виде
    <code>(err, req, res, next)</code>:

  +js.
    app.use(function(err, req, res, next){
      console.error(err.stack);
      res.send(500, 'Что-то сломалось!');
    });

  p.
    Хотя это и не обязательно, прослойки для обработки ошибок определяются
    в самом низу, после всех остальных вызовов <code>app.use()</code>, как показано ниже:

  +js.
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    app.use(function(err, req, res, next){
      // логика
    });

  p.
    Из таких прослоек можно отдавать любые ответы. Можно отвечать
    HTML-страничкой с ошибкой, простым сообщением, JSON-строкой,
    чем угодно, на своё усмотрение.

  p.
    Для лучшей организации высокоуровневого фреймворка, можно определять
    несколько прослоек обработки ошибок, как впрочем и других прослоек.
    Например, вам надо объявить один обработчик ошибок
    для запросов, сделанных с помощью XHR, другой - для обычных запросов. Вот как это можно сделать:

  +js.
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    app.use(logErrors);
    app.use(clientErrorHandler);
    app.use(errorHandler);

  p.
    Здесь <code>logErrors</code> может писать информацию о запросе
    и ошибках в stderr или в loggly или подобные сервисы:

  +js.
    function logErrors(err, req, res, next) {
      console.error(err.stack);
      next(err);
    }

  p.
    Где <code>clientErrorHandler</code> определён, как показано ниже,
    заметьте, что ошибка явным образом передаётся в next.

  +js.
    function clientErrorHandler(err, req, res, next) {
      if (req.xhr) {
        res.send(500, { error: 'Что-то стряслось!' });
      } else {
        next(err);
      }
    }

  p.
    Перехватчик всех ошибок <code>errorHandler</code> может быть реализован так:

  +js.
    function errorHandler(err, req, res, next) {
      res.status(500);
      res.render('error', { error: err });
    }