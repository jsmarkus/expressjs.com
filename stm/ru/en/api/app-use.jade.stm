@section
@  h3(id='app.use') app.use([path], function)
@  
@  p.
@    Use the given middleware <code>function</code>, with optional mount <code>path</code>,
#    Использовать данную прослойку <code>function</code>, опционально смонтировав её под URL-префиксом <code>path</code>
@    defaulting to "/".
#    (по умолчанию "/").
@
@  +js.
@    var express = require('express');
@    var app = express();
@
@    // simple logger
#    // простой логгер
@    app.use(function(req, res, next){
@      console.log('%s %s', req.method, req.url);
@      next();
@    });
@
@    // respond
#    // ответ
@    app.use(function(req, res, next){
@      res.send('Hello World');
#      res.send('Привет, мир!');
@    });
@
@    app.listen(3000);
@
@  p.
@    The "mount" path is stripped and is <strong>not</strong> visible
#    "Точка монтирования" <code>path</code> в саму прослойку
@    to the middleware <code>function</code>. The main effect of this feature is that
#    <code>function</code> не передаётся. Предесть в том, что
@    mounted middleware may operate without code changes regardless of its "prefix"
#    смонтированная прослойка может работать без изменений кода, не зависимо от
@    pathname.
#    "префикса" пути.
@
@  p.
@    Here's a concrete example, take the typical use-case of serving files in ./public
#    Ниже приведён типичный пример из жизни - отдачас статики из папки ./public
@    using the <code>express.static()</code> middleware:
#    с помощью прослойки <code>express.static()</code>:
@
@  +js.
@    // GET /javascripts/jquery.js
@    // GET /style.css
@    // GET /favicon.ico
@    app.use(express.static(__dirname + '/public'));
@
@  p.
@    Say for example you wanted to prefix all static files with "/static", you could
#    Теперь допустим, что вам нужно задать для статических файлов префикс "/static". Для этого можно
@    use the "mounting" feature to support this. Mounted middleware functions are <strong>not</strong>
#    исполтьзовать монтирование прослойки. Смонтированная функция прослойки <strong>не</strong> вызывается,
@    invoked unless the <code>req.url</code> contains this prefix, at which point
#    если <code>req.url</code> не начинается с префикса, и переданный в эту функцию
@    it is stripped when the function is invoked. This affects this function only,
#    URL обрезается, чтобы не содержать префикса. Таким он передаётся только в данную функцию,
@    subsequent middleware will see <code>req.url</code> with "/static" included
#    последующие же прослойки увидят <code>req.url</code> вместе с префиксом "/static",
@    unless they are mounted as well.
#    если конечно они не смонтированы под этим префиксом.
@
@  +js.
@    // GET /static/javascripts/jquery.js
@    // GET /static/style.css
@    // GET /static/favicon.ico
@    app.use('/static', express.static(__dirname + '/public'));
@
@  p.
@    The order of which middleware are "defined" using <code>app.use()</code> is
#    Порядок опреления прослоек через <code>app.use()</code> очень важен,
@    very important, they are invoked sequentially, thus this defines middleware
#    поскольку они вызываются в том порядке, в каком были определены.
@    precedence. For example usually <code>express.logger()</code> is the very
#    Например, <code>express.logger()</code>, логгирующий запросы часто идёт самой первой
@    first middleware you would use, logging every request:
#    прослойкой:
@
@  +js.
@    app.use(express.logger());
@    app.use(express.static(__dirname + '/public'));
@    app.use(function(req, res){
@      res.send('Hello');
#      res.send('Привет');
@    });
@
@  p.
@    Now suppose you wanted ignore logging requests for static files, but to
#    Теперь предположим, что мы хотим проигнорировать логгирование запросов для статических файлов,
@    continue logging routes and middleware defined after <code>logger()</code>,
#    но всё также хотим логгировать их для остальных запросов -
@    you would simply move <code>static()</code> above:
#    для этого можно просто переместить <code>static()</code> выше, чем <code>logger()</code>:
@
@  +js.
@    app.use(express.static(__dirname + '/public'));
@    app.use(express.logger());
@    app.use(function(req, res){
@      res.send('Hello');
#      res.send('Привет');
@    });
@
@  p.
@    Another concrete example would be serving files from multiple directories,
#    Другой пример из жизни - это когда нам надо отдавать статику из нескольких директорий,
@    giving precedence to "./public" over the others:
#    сохраняя более высокий приоритет за директорией "./public":
@
@  +js.
@    app.use(express.static(__dirname + '/public'));
@    app.use(express.static(__dirname + '/files'));
@    app.use(express.static(__dirname + '/uploads'));
@
